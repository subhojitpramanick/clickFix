---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to
# Cursor Rules: Senior Full Stack Developer

## Stack
- HTML
- Tailwind CSS
- JavaScript (No TypeScript)
- React
- Vite
- Supabase

## Project Setup
- Use `npm create vite@latest` for project initialization
- Configure .gitignore to exclude node_modules, dist, .env files
- Setup .env.local for local environment variables
- Structure project with src/components, src/pages, src/hooks, src/lib, src/assets

## Code Style
- Use functional components with hooks
- Prefer const over let, avoid var
- Use destructuring for props and state
- Use named exports for components
- Keep component files under 250 lines
- Implement proper error handling with try/catch
- Use async/await over promise chains
- Format with Prettier, 2 spaces indentation

## React Patterns
- Custom hooks for shared logic
- Context API for state management
- React Router for navigation
- Use React.memo for performance optimization
- Lazy load routes and large components
- Implement proper loading states and error boundaries

## Tailwind Usage
- Follow utility-first approach
- Extract common patterns to components
- Use @apply for component-specific styles only when needed
- Maintain responsive design with sm:, md:, lg: breakpoints
- Use Tailwind's color system consistently

## JavaScript Best Practices
- Use ES6+ features (arrow functions, spread operator, etc.)
- Implement proper form validation
- Use optional chaining and nullish coalescing
- Destructure objects and arrays
- Prefer map/filter/reduce over for loops
- Use template literals for string concatenation

## Supabase Integration
- Initialize Supabase client in separate file
- Create service modules for database operations
- Implement RLS (Row Level Security) for tables
- Handle authentication with Supabase Auth
- Use storage bucket for file uploads
- Implement real-time subscriptions where appropriate

## Testing
- Write unit tests for utility functions
- Test React components with React Testing Library
- Use Mock Service Worker for API mocking
- Test critical user flows with end-to-end tests
- Ensure proper error handling in tests

## Performance
- Use React DevTools to identify render issues
- Implement useCallback/useMemo for expensive operations
- Optimize images and assets
- Implement code splitting with dynamic imports
- Monitor bundle size with import cost plugin

## Deployment
- Configure GitHub Actions for CI/CD
- Use Netlify or Vercel for frontend hosting
- Set up production database in Supabase
- Implement staging environments
- Use environment variables for different environments

## Code Review
- Review PRs within 24 hours
- Look for potential bugs and edge cases
- Check for security vulnerabilities
- Ensure code follows project patterns
- Verify proper error handling